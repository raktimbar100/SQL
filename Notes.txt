What is SQL?
1.  SQL stands for Structured Query Language
2.  SQL lets you access and manipulate databases
3.  SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987



What Can SQL do?
1.  SQL can execute queries against a database
2.  SQL can retrieve data from a database
3.  SQL can insert records in a database
4.  SQL can update records in a database
5.  SQL can delete records from a database
6.  SQL can create new databases
7.  SQL can create new tables in a database
8.  SQL can create stored procedures in a database
9.  SQL can create views in a database
10. SQL can set permissions on tables, procedures, and views



** SQL keywords are NOT case sensitive: select is the same as SELECT



Semicolon after SQL Statements?
Some database systems require a semicolon at the end of each SQL statement.
Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.



Some of The Most Important SQL Commands
SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



SELECT Statement
=================
The SELECT statement is used to select data from a database.

Syntax:
    -------------------------------------------
    |       SELECT column1, column2, ...      |
    |       FROM table_name;                  |
    -------------------------------------------

To select all the fields available in the table,
Syntax:
    -------------------------------------------
    |       SELECT * FROM table_name;         |
    -------------------------------------------



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



SQL SELECT DISTINCT Statement
==============================
The SELECT DISTINCT statement is used to return only distinct (different) values.

Syntax:
    -----------------------------------------------
    |       SELECT DISTINCT column1, column2,     |
    |       FROM table_name;                      |
    -----------------------------------------------

Select statement without distinct -->  SELECT Country FROM Customers;
Select statement with distinct -->  SELECT DISTINCT Country FROM Customers;



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



SQL WHERE Clause
=================
The WHERE clause is used to filter records.
It is used to extract only those records that fulfill a specified condition.

Syntax:
    ------------------------------------------------
    |       SELECT column1, column2, ...           |
    |       FROM table_name                        |
    |       WHERE condition;                       |
    ------------------------------------------------

*****************************************************************************************************************
*      Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!   *
*****************************************************************************************************************


Example --> SELECT * FROM Customers WHERE CustomerID=1;



Operators in the WHERE clause:
=	        Equal	
>	        Greater than	
<	        Less than	
>=	        Greater than or equal	
<=	        Less than or equal	
<>	        Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	    Between a certain range	
LIKE	    Search for a pattern	
IN	        To specify multiple possible values for a column



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



SQL AND, OR and NOT Operators
==============================
The WHERE clause can be combined with AND, OR, and NOT operators.

The AND operator displays a record if all the conditions separated by AND are TRUE.
The OR operator displays a record if any of the conditions separated by OR is TRUE.
The NOT operator displays a record if the condition(s) is NOT TRUE.

AND Syntax:
    -----------------------------------------------------
    |       SELECT column1, column2, ...                |
    |       FROM table_name                             |
    |       WHERE condition1 AND condition2 AND ...     |
    -----------------------------------------------------

OR Syntax:
    -----------------------------------------------------
    |       SELECT column1, column2, ...                |
    |       FROM table_name                             |
    |       WHERE condition1 OR condition2 OR ...       |
    -----------------------------------------------------

NOT Syntax:
    -----------------------------------------------------
    |       SELECT column1, column2, ...                |
    |       FROM table_name                             |
    |       WHERE NOT condition                         |
    -----------------------------------------------------



Combining AND, OR and NOT :--

Example -->  

1.  The following SQL statement selects all fields from "Customers" where country is "Germany" AND city must be "Berlin" OR "München" (use parenthesis to form complex expressions):
SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='München');


2.  The following SQL statement selects all fields from "Customers" where country is NOT "Germany" and NOT "USA":
SELECT * FROM Customers WHERE NOT Country='Germany' AND NOT Country='USA';



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



SQL ORDER BY Keyword
=====================
The ORDER BY keyword helps to arrange the result-set in ascending or descending order. 
By default, OREDR BY sorts in ascending order. To sort in descending order, DESC keword is required.

Syntax:
    ----------------------------------------------------------
    |       SELECT column1, column2, ...                    |
    |       FROM table_name                                 |
    |       ORDER BY column1, column2, ... ASC|DESC;        |
    ----------------------------------------------------------

NB:  ASC => Ascending order.

Example --> SELECT * FROM Customers ORDER BY Country;
ORDER BY Several Columns Example  -->  SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;
ORDER BY Several Columns Example  -->  SELECT * FROM Customers ORDER BY Country, CustomerName;



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



SQL INSERT INTO Statement
==========================
The INSERT INTO statement is used to insert new records in a table.

Syntax 1:
    -----------------------------------------------------------------------
    |         INSERT INTO table_name (column1, column2, column3, ...)     |
    |         VALUES (value1, value2, value3, ...);                       |
    -----------------------------------------------------------------------
Specifying both the column names and the values to be inserted.


Syntax 2:
    -----------------------------------------------------------------------
    |         INSERT INTO table_name                                     |
    |         VALUES (value1, value2, value3, ...);                      |
    -----------------------------------------------------------------------
For adding values for all the columns of the table, the column names are not required to be specified individually in the SQL query.
However, the order of the values must be in the same order as the columns in the table.

Example --> INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



SQL NULL Values
================
If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.


*************************************************************************************************
*       Note: A NULL value is different from a zero value or a field that contains spaces.      *
*       A field with a NULL value is one that has been left blank during record creation!       *
*************************************************************************************************


To test for NULL Values, IS NULL and IS NOT NULL operators are used.

1.   Syntax for IS NULL:
    -----------------------------------------------------
    |       SELECT column_names                         |
    |       FROM table_name                             |
    |       WHERE column_name IS NULL;                  |
    -----------------------------------------------------


2.   Syntax for IS NOT NULL:
    -----------------------------------------------------
    |       SELECT column_names                         |
    |       FROM table_name                             |
    |       WHERE column_name IS NOT NULL;              |
    -----------------------------------------------------



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



SQL UPDATE Statement
=====================
The UPDATE statement is used to modify the existing records in a table.

Syntax:
    -----------------------------------------------------
    |       UPDATE table_name                           |
    |       SET column1 = value1, column2 = value2, ... |
    |       WHERE condition;                            |
    -----------------------------------------------------


*****************************************************************************************************************
*      Note: When updating records in a table, the WHERE clause in the UPDATE statement are to be noticed.      *        
*      The WHERE clause specifies which record(s) that should be updated.                                       *        
*      Omitting the WHERE clause, all records in the table will be updated!                                     *        
*****************************************************************************************************************


** The WHERE clause that determines how many records will be updated.
----------------------------------------------------------------------

Examples  -->
1.  UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;
    Updates the first customer (CustomerID = 1) with a new contact person and a new city.

2.  UPDATE Customers SET ContactName='Juan' WHERE Country='Mexico';
    Updates the ContactName to "Juan" for all records where country is "Mexico":

3.  UPDATE Customers SET ContactName='Juan';
    Here we have omit the WHERE clause. Thus, ALL records will be updated.



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



SQL DELETE Statement